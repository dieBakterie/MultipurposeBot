# docker-compose.yaml
version: '3.9'

services:
  multipurpose-bot:
    container_name: multipurpose-bot
    image: node:current-alpine3.21
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules # Verhindert das Überschreiben von node_modules
    command: >
      sh -c "
      if [ ! -d 'node_modules' ]; then
        npm install;
      fi &&
      npm run start"
    env_file:
      - .env
    environment:
      - DOCKER_ENVIRONMENT=true
      - LAVALINK_HOST=lavaLink
      - DATABASE_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
      lavaLink:
        condition: service_started
    networks:
      - multipurpose-network
    restart: unless-stopped

  lavaLink:
    container_name: lavaLink
    image: fredboat/lavalink:latest-alpine
    environment:
      LAVALINK_PORT: ${LAVALINK_PORT}
      LAVALINK_HOST: ${LAVALINK_HOST}
      LAVALINK_PASSWORD: ${LAVALINK_PASSWORD}
      LAVALINK_YOUTUBE_CONFIG_E_MAIL: ${LAVALINK_YOUTUBE_CONFIG_E_MAIL}
      LAVALINK_YOUTUBE_CONFIG_PASSWORD: ${LAVALINK_YOUTUBE_CONFIG_PASSWORD}
    volumes:
      - ./lavaLink/application.yml:/app/application.yml
    # ports:
    #   - "${LAVALINK_PORT}:${LAVALINK_PORT}"
    networks:
      - multipurpose-network
    restart: unless-stopped

  postgres:
    container_name: postgres
    image: postgres:17.2-alpine3.21
    environment:
      POSTGRES_HOST: ${DATABASE_HOST} # Überschreibt den Host nur für Docker
      POSTGRES_USER: ${DATABASE_USER} # Aus .env
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD} # Aus .env
      POSTGRES_DB: ${DATABASE_NAME} # Aus .env
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./sql/init.pgsql:/docker-entrypoint-initdb.d/init.sql
    # ports:
    #   - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - multipurpose-network
    restart: unless-stopped

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true # Alte Images entfernen
      - WATCHTOWER_POLL_INTERVAL=300 # Überprüfe alle 300 Sekunden
    restart: unless-stopped
    networks:
      - multipurpose-network

volumes:
  pgdata:

networks:
  multipurpose-network:
    driver: bridge
